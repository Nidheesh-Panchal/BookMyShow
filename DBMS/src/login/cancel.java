/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package login;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDateTime;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author vandi
 */
public class cancel extends javax.swing.JFrame {

    /**
     * Creates new form cancel
     */
     public static Connection connecrDb() {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/bms", "root", "root");
            return conn;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            System.out.println("Connection failure");
        }
        return null;
    }
//     DefaultTableModel dtm= = new DefaultTableModel() {
//
//    @Override
//    public boolean isCellEditable(int row, int column) {
//       //all cells false
//       return false;
//    }
//};
     DefaultTableModel dtm = new DefaultTableModel() {

    @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }
};


    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    private final mainpage mainp;
    String username;
    java.util.Date moviedatesqldate;
    String moviedatesql;
    String movietimesql;
    String movienamesql;
    String challsql;
    String receiver;
    public cancel(mainpage m,String use) {
        initComponents();
        mainp=m;
        username=use;
        conn = connecrDb();
    }
     private cancel() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ticket_table = new javax.swing.JTable();
        cancel_button = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(250, 150));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cancel Ticket", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N

        ticket_table.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ticket_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Time", "Movie name", "Cinema hall"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ticket_table);

        cancel_button.setText("Cancel Ticket");
        cancel_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancel_button)
                .addGap(341, 341, 341))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancel_button))
        );

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("<- Go Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancel_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_buttonActionPerformed
        // TODO add your handling code here:
        LocalDateTime ti=LocalDateTime.now();
        String tim=ti.toString();
        tim=tim.substring(11,13) + tim.substring(14,16);
        String movieid="";
        String challid="";
        String tid="";
        String dalit="";
        String getmovie="select movieid from movie where mname=?";
        String getchname="select challid from cinemahall where chname=?";
        String delete="delete from ticket where username=? and theatreid=? and challid=? and time=? and date=?;";
        //dtm.;
        
        int row=ticket_table.getSelectedRow();
        if(row==-1)
        {
            JOptionPane.showMessageDialog(null,"Please select a ticket from the table to cancel");
                return;
        }
//        System.out.println(ticket_table.getValueAt(row, 0));
        try
        {
            pst = conn.prepareStatement(getmovie);
            pst.setString(1,(String)ticket_table.getValueAt(row, 2));
            rs = pst.executeQuery();
            if(rs.next())
            {
               movieid=Integer.toString(rs.getInt(1));
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Check your movie name and try again.");
                return;
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            return;
        }
        try
        {
            pst = conn.prepareStatement(getchname);
            pst.setString(1,(String)ticket_table.getValueAt(row, 3));
            rs = pst.executeQuery();
            if(rs.next())
            {
               challid=Integer.toString(rs.getInt(1));
            }
            else
            {
                JOptionPane.showMessageDialog(null,"Check your cinema hall name and try again.");
                return;
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            return;
        }
        String gettid="select theatreid from screening where movieid=? and challid=? and time=? and date=?;";
        try
        {
            pst = conn.prepareStatement(gettid);
            pst.setString(1,movieid);
            pst.setString(2,challid);
            pst.setString(3,(String)ticket_table.getValueAt(row, 1));
//            java.util.Date date=moviedate.getDate();
//            String dd=Integer.toString(date.getDate());
//            String mm=Integer.toString(date.getMonth()+1);
//            String yy=Integer.toString(date.getYear()+1900);
            dalit=(String)ticket_table.getValueAt(row, 0);
            pst.setString(4,dalit);
            rs = pst.executeQuery();
            if(rs.next())
            {
               tid=Integer.toString(rs.getInt(1));
            }
            else
            {
                JOptionPane.showMessageDialog(null,"invalid ticket details. Please enter correct ticket details.");
                return;
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            return;
        }
        String validate="select time from ticket where theatreid=? and challid=? and time=? and date=? and username=?;";
        try
        {
            pst = conn.prepareStatement(validate);
            pst.setString(1,tid);
            pst.setString(2,challid);
            pst.setString(3,(String)ticket_table.getValueAt(row, 1));
            pst.setString(4,dalit);
            pst.setString(5,username);
            rs = pst.executeQuery();
            if(rs.next())
            {
               int time=rs.getInt(1);
               int t1=Integer.parseInt(tim);
               if(t1+300 > time)
               {
                   JOptionPane.showMessageDialog(null,"Your deadline for ticket cancellation is reached. You cannot cancel your ticket now.");
                   return;
               }
               int count=1;
               while(rs.next())
               {
                   count++;
               }
               String findmail="update screening set noseatbooked=noseatbooked-? where theatreid=? and challid=? and time=? and date=?;";
                try
                {
                    pst=conn.prepareStatement(findmail);
                    pst.setString(1,Integer.toString(count));
                    pst.setString(2,tid);
                    pst.setString(3,challid);
                    pst.setString(4,(String)ticket_table.getValueAt(row, 1));
                    pst.setString(5,dalit);
                    pst.execute();
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null,e);
                    return;
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null,"You have no such ticket. Please enter valid details.");
                return;
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            return;
        }
        
        try
        {
            pst = conn.prepareStatement(delete);
            pst.setString(1,username);
            pst.setString(2,tid);
            pst.setString(3,challid);
            pst.setString(4,(String)ticket_table.getValueAt(row, 1));
            pst.setString(5,dalit);
            pst.execute();
            String findmail="select emailid from customer where username=?";
            try
            {
                pst=conn.prepareStatement(findmail);
                pst.setString(1,username);
                rs=pst.executeQuery();
                if(rs.next())
                {
                    receiver=rs.getNString(1);
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,e);
            }
            SendEmail s=new SendEmail();
            
            s.cancelled(receiver,username,dalit,(String)ticket_table.getValueAt(row, 1), (String)ticket_table.getValueAt(row, 3),(String)ticket_table.getValueAt(row, 2));
            JOptionPane.showMessageDialog(null,"Successfully cancelled your tickets");
            mainp.setVisible(true);
            this.setVisible(false);
            this.dispose();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            return;
        }
    }//GEN-LAST:event_cancel_buttonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        mainp.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //dtm.
        dtm=(DefaultTableModel) ticket_table.getModel();
        dtm.setRowCount(0);
        String getData="select t.date,t.time,m.mname,c.chname from ticket t inner join screening s on (t.theatreid,t.challid,t.date,t.time)=(s.theatreid,s.challid,s.date,s.time) inner join movie m on s.movieid=m.movieid inner join cinemahall c on c.challid=t.challid where username=? group by t.theatreid,t.challid,t.date,t.time order by t.date desc;";
        try
        {
            pst = conn.prepareStatement(getData);
            pst.setString(1,username);
            rs = pst.executeQuery();
            while(rs.next())
            {
               moviedatesqldate=rs.getDate(1);
               System.out.println(moviedatesqldate);
               String ddexp=Integer.toString(moviedatesqldate.getDate());
               String mmexp=Integer.toString(moviedatesqldate.getMonth()+1);
               String yyexp=Integer.toString(moviedatesqldate.getYear()+1900);
               String moviedatesql=yyexp+"-"+mmexp+"-"+ddexp;
               System.out.println(moviedatesql);
               
               movietimesql=Integer.toString(rs.getInt(2));
               System.out.println(movietimesql);
               
               movienamesql=rs.getNString(3);
               System.out.println(movienamesql);
               
               challsql=rs.getNString(4);
               System.out.println(challsql);
               
               dtm.addRow(new Object[] { moviedatesql, movietimesql, movienamesql,challsql}); 
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
     // add row dynamically into the table      
//        for (int count = 1; count <= 3; count++) {
//           
//            dtm.addRow(new Object[] { "data", "data", "data","data"});
//        }
        ticket_table.setModel(dtm);
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        mainp.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cancel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cancel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cancel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cancel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cancel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel_button;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable ticket_table;
    // End of variables declaration//GEN-END:variables
}
